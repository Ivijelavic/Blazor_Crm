@using CrmExpert.Data
@using CrmExpert.Model
@inject NavigationManager NavigationManager
@inject OpportunityService productservice

@if (kontakti == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card">
        <h5 class="card-header">
            <i class="fas fa-user-lock"></i>&nbsp;&nbsp;&nbsp;Kontakti klijenta
        </h5>
        <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="6" FilterMode="FilterMode.Simple"
                        SelectionMode="DataGridSelectionMode.Multiple" Style="font-size:smaller;"
                        AllowSorting="false" Data="@kontakti" TItem="KontaktiView" @bind-Value=@selectedDobavljaci RowSelect=@onChange>
            <Columns>
                <RadzenDataGridColumn TItem="KontaktiView" Width="10px" Sortable="false" Filterable="true">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool" Style="width: 1em;height: 1em;"
                                        Value="@(kontakti.Any(i => selectedDobavljaci != null && selectedDobavljaci.Contains(i)))"
                                        Change="@(args => selectedDobavljaci = args ? kontakti.ToList() : null)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TriState="false" Value="@(selectedDobavljaci != null && selectedDobavljaci.Contains(data))" Style="width: 1em;height: 1em;" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="KontaktiView" Property="Ime" Title="Ime" Width="30px"> </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="KontaktiView" Property="Prezime" Title="Prezime" Width="30px"> </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="KontaktiView" Property="EmailAdresa" Title="Email" Width="30px"> </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="KontaktiView" Property="Grad" Title="Grad" Width="30px"> </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </div>
}



@code {
    [Parameter]
    public EventCallback<KontaktiView> OnClick { get; set; }


    int count;
    void LoadData(LoadDataArgs args)
    {
        selectedDobavljaci = productservice.GetContactsViewById(Convert.ToInt32(IdKlijent));
    }


    [Parameter]
    public string IdKlijent { get; set; }

    IList<KontaktiView> selectedDobavljaci;

    IEnumerable<KontaktiView> kontakti;
    protected override async Task OnInitializedAsync()
    {
        kontakti = await Task.Run(() => productservice.GetContactsViewIEN());
        selectedDobavljaci = productservice.GetContactsViewById(Convert.ToInt32(IdKlijent));
    }
    void onChange(object value)
    {
        var convertedObject = (KontaktiView)value;
        KontaktiView newKontakt = new KontaktiView();
        newKontakt.id = convertedObject.id;
        newKontakt.Ime = convertedObject.Ime;
        newKontakt.Prezime = convertedObject.Prezime;
        newKontakt.EmailAdresa = convertedObject.EmailAdresa;
        OnClick.InvokeAsync(newKontakt);
    }

    void AddFileToList(object value, object name)
    {
        // OnClick.InvokeAsync("poruka");
        /*  bool isSelect = false;
          ListaPonudaDobavljaciView ponuda = (ListaPonudaDobavljaciView)name;
          var a = productservice.GetStavkePonudaDobavljaca(ponuda.id);
          if (a.Result.Count == 0)
          {
              NavigationManager.NavigateTo(url + "/" + ponuda.id + "/" + Convert.ToInt32(OpportunityId));
          }
          if (value is bool)
          {
              isSelect = (bool)value;

          }
          if (isSelect)
          {
              AppData.AddProduct(ponuda);
          }
          else
          {
              AppData.RemoveProduct(ponuda);
          }
          Show();*/
    }


    public void RefreshMe(String msg)
    {
        //StateHasChanged();
        //int id = Convert.ToInt32(msg);
        //Klijenti klijenti = productservice.getClientById(id);
        //decimal valLeasing = 100000;

        //FinancialScoring(klijenti.OIB, valLeasing, klijenti.Tip);

    }

}



